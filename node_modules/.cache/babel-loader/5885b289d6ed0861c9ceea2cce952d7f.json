{"ast":null,"code":"import _toConsumableArray from\"/home/dheerajcl/Code-pulse/Codepulse/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/home/dheerajcl/Code-pulse/Codepulse/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/home/dheerajcl/Code-pulse/Codepulse/node_modules/@babel/runtime/regenerator/index.js\";var express=require('express');var http=require('http');var path=require('path');var _require=require('socket.io'),Server=_require.Server;var mongoose=require('mongoose');var app=express();var server=http.createServer(app);var io=new Server(server);var Room=mongoose.model('Room',{roomId:String// Add other fields as needed\n});app.use(express.json());// Serve static assets in production\nif(process.env.NODE_ENV==='production'){// Set static folder\napp.use(express.static('build'));// Serve index.html for all routes\napp.get('*',function(req,res){res.sendFile(path.resolve(__dirname,'build','index.html'));});}// Connect to MongoDB\nmongoose.connect('mongodb+srv://dheerajcl:Dheer%40j12@cluster0.ukvgapl.mongodb.net/?retryWrites=true&w=majority',{useNewUrlParser:true,useUnifiedTopology:true});// Function to join a room with a referral ID\napp.post('/join-room',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(req,res){var _req$body,roomId,username,referralId,existingRoom,newRoom;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_req$body=req.body,roomId=_req$body.roomId,username=_req$body.username,referralId=_req$body.referralId;if(!(!roomId||!username||!referralId)){_context.next=3;break;}return _context.abrupt(\"return\",res.status(400).json({error:'ROOM ID, username, and referral ID are required'}));case 3:_context.prev=3;_context.next=6;return Room.findOne({roomId:referralId});case 6:existingRoom=_context.sent;if(existingRoom){_context.next=9;break;}return _context.abrupt(\"return\",res.status(404).json({error:'Invalid Referral ID'}));case 9:// If the referral ID is valid, proceed with creating a new room\nnewRoom=new Room({roomId:roomId/* add other fields if needed */});_context.next=12;return newRoom.save();case 12:return _context.abrupt(\"return\",res.json({success:true,roomId:roomId,username:username}));case 15:_context.prev=15;_context.t0=_context[\"catch\"](3);console.error(_context.t0);return _context.abrupt(\"return\",res.status(500).json({error:'Internal Server Error'}));case 19:case\"end\":return _context.stop();}}},_callee,null,[[3,15]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());// Socket.IO code\nvar userSocketMap={};function getAllConnectedClients(roomId){return Array.from(io.sockets.adapter.rooms.get(roomId)||[]).map(function(socketId){return{socketId:socketId,username:userSocketMap[socketId]};});}io.on('connection',function(socket){console.log('socket connected',socket.id);socket.on('join',function(_ref2){var roomId=_ref2.roomId,username=_ref2.username;userSocketMap[socket.id]=username;socket.join(roomId);var clients=getAllConnectedClients(roomId);clients.forEach(function(_ref3){var socketId=_ref3.socketId;io.to(socketId).emit('joined',{clients:clients,username:username,socketId:socket.id});});});socket.on('codeChange',function(_ref4){var roomId=_ref4.roomId,code=_ref4.code;socket.in(roomId).emit('codeChange',{code:code});});socket.on('syncCode',function(_ref5){var socketId=_ref5.socketId,code=_ref5.code;io.to(socketId).emit('codeChange',{code:code});});socket.on('disconnecting',function(){var rooms=_toConsumableArray(socket.rooms);rooms.forEach(function(roomId){socket.in(roomId).emit('disconnected',{socketId:socket.id,username:userSocketMap[socket.id]});});delete userSocketMap[socket.id];socket.leave();});});var PORT=process.env.PORT||5000;// Call the connectToMongoDB function to establish the MongoDB connection\nserver.listen(PORT,function(){console.log(\"Listening on port \".concat(PORT));});","map":{"version":3,"sources":["/home/dheerajcl/Code-pulse/Codepulse/src/pages/Home.js"],"names":["express","require","http","path","Server","mongoose","app","server","createServer","io","Room","model","roomId","String","use","json","process","env","NODE_ENV","static","get","req","res","sendFile","resolve","__dirname","connect","useNewUrlParser","useUnifiedTopology","post","body","username","referralId","status","error","findOne","existingRoom","newRoom","save","success","console","userSocketMap","getAllConnectedClients","Array","from","sockets","adapter","rooms","map","socketId","on","socket","log","id","join","clients","forEach","to","emit","code","in","leave","PORT","listen"],"mappings":"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","sourcesContent":["const express = require('express');\nconst http = require('http');\nconst path = require('path');\nconst { Server } = require('socket.io');\nconst mongoose = require('mongoose');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\n\nconst Room = mongoose.model('Room', {\n  roomId: String,\n  // Add other fields as needed\n});\n\napp.use(express.json());\n\n// Serve static assets in production\nif (process.env.NODE_ENV === 'production') {\n  // Set static folder\n  app.use(express.static('build'));\n\n  // Serve index.html for all routes\n  app.get('*', (req, res) => {\n    res.sendFile(path.resolve(__dirname, 'build', 'index.html'));\n  });\n}\n\n// Connect to MongoDB\nmongoose.connect('mongodb+srv://dheerajcl:Dheer%40j12@cluster0.ukvgapl.mongodb.net/?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Function to join a room with a referral ID\napp.post('/join-room', async (req, res) => {\n  const { roomId, username, referralId } = req.body;\n\n  if (!roomId || !username || !referralId) {\n    return res.status(400).json({ error: 'ROOM ID, username, and referral ID are required' });\n  }\n\n  try {\n    // Check if the referral ID exists in the database\n    const existingRoom = await Room.findOne({ roomId: referralId });\n\n    if (!existingRoom) {\n      return res.status(404).json({ error: 'Invalid Referral ID' });\n    }\n\n    // If the referral ID is valid, proceed with creating a new room\n    const newRoom = new Room({ roomId, /* add other fields if needed */ });\n    await newRoom.save();\n\n    return res.json({ success: true, roomId, username });\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ error: 'Internal Server Error' });\n  }\n});\n\n// Socket.IO code\nconst userSocketMap = {};\n\nfunction getAllConnectedClients(roomId) {\n  return Array.from(io.sockets.adapter.rooms.get(roomId) || []).map(\n    (socketId) => {\n      return {\n        socketId,\n        username: userSocketMap[socketId],\n      };\n    }\n  );\n}\n\nio.on('connection', (socket) => {\n  console.log('socket connected', socket.id);\n\n  socket.on('join', ({ roomId, username }) => {\n    userSocketMap[socket.id] = username;\n    socket.join(roomId);\n    const clients = getAllConnectedClients(roomId);\n    clients.forEach(({ socketId }) => {\n      io.to(socketId).emit('joined', {\n        clients,\n        username,\n        socketId: socket.id,\n      });\n    });\n  });\n\n  socket.on('codeChange', ({ roomId, code }) => {\n    socket.in(roomId).emit('codeChange', { code });\n  });\n\n  socket.on('syncCode', ({ socketId, code }) => {\n    io.to(socketId).emit('codeChange', { code });\n  });\n\n  socket.on('disconnecting', () => {\n    const rooms = [...socket.rooms];\n    rooms.forEach((roomId) => {\n      socket.in(roomId).emit('disconnected', {\n        socketId: socket.id,\n        username: userSocketMap[socket.id],\n      });\n    });\n    delete userSocketMap[socket.id];\n    socket.leave();\n  });\n});\n\nconst PORT = process.env.PORT || 5000;\n\n// Call the connectToMongoDB function to establish the MongoDB connection\nserver.listen(PORT, () => {\n  console.log(`Listening on port ${PORT}`);\n});\n"]},"metadata":{},"sourceType":"module"}